// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package ioc

import (
	"codexie.com/w-book-article/internal/config"
	"codexie.com/w-book-article/internal/dao/cache"
	"codexie.com/w-book-article/internal/dao/db"
	"codexie.com/w-book-article/internal/handler"
	"codexie.com/w-book-article/internal/logic"
	"codexie.com/w-book-article/internal/repo"
	"codexie.com/w-book-article/internal/svc"
	"github.com/google/wire"
	"github.com/zeromicro/go-zero/rest"
)

// Injectors from wire.go:

func NewApp(c config.Config) (*rest.Server, error) {
	serviceContext := svc.NewServiceContext(c)
	gormDB := svc.CreteDbClient(c)
	authorDao := db.NewAuthorDao(gormDB)
	client := svc.CreateRedisClient(c)
	articleCache := cache.NewArticleRedis(client)
	iAuthorRepository := repo.NewAuthorRepository(authorDao, articleCache)
	readerDao := db.NewReaderDao(gormDB)
	iReaderRepository := repo.NewReaderRepository(readerDao, articleCache)
	interactionClient := svc.CreateCodeRpcClient(c)
	producer := svc.CreateKafkaProducer(c)
	articleLogic := logic.NewArticleLogic(iAuthorRepository, iReaderRepository, interactionClient, producer)
	articleHandler := handler.NewArticleHandler(serviceContext, articleLogic)
	server := NewServer(c, articleHandler, client)
	return server, nil
}

// wire.go:

var ServerSet = wire.NewSet(NewServer)

var HandlerSet = wire.NewSet(handler.NewArticleHandler)

var LogicSet = wire.NewSet(logic.NewArticleLogic)

var SvcSet = wire.NewSet(svc.NewServiceContext)

var RepoSet = wire.NewSet(repo.NewAuthorRepository, repo.NewReaderRepository)

var DaoSet = wire.NewSet(db.NewAuthorDao, db.NewReaderDao, cache.NewArticleRedis)

var DbSet = wire.NewSet(svc.CreteDbClient, svc.CreateRedisClient)

var MessageSet = wire.NewSet(svc.CreateKafkaProducer)

var RpcSet = wire.NewSet(svc.CreateCodeRpcClient)
