// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/sms/client.go

// Package mock_sms is a generated GoMock package.
package mock_sms

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSmsClient is a mock of SmsClient interface.
type MockSmsClient struct {
	ctrl     *gomock.Controller
	recorder *MockSmsClientMockRecorder
}

// MockSmsClientMockRecorder is the mock recorder for MockSmsClient.
type MockSmsClientMockRecorder struct {
	mock *MockSmsClient
}

// NewMockSmsClient creates a new mock instance.
func NewMockSmsClient(ctrl *gomock.Controller) *MockSmsClient {
	mock := &MockSmsClient{ctrl: ctrl}
	mock.recorder = &MockSmsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSmsClient) EXPECT() *MockSmsClientMockRecorder {
	return m.recorder
}

// SendSms mocks base method.
func (m *MockSmsClient) SendSms(ctx context.Context, phone string, args map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSms", ctx, phone, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendSms indicates an expected call of SendSms.
func (mr *MockSmsClientMockRecorder) SendSms(ctx, phone, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSms", reflect.TypeOf((*MockSmsClient)(nil).SendSms), ctx, phone, args)
}
