// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package ioc

import (
	"codexie.com/w-book-common/ioc"
	"codexie.com/w-book-interact/internal/config"
	"codexie.com/w-book-interact/internal/dao/cache"
	"codexie.com/w-book-interact/internal/dao/db"
	"codexie.com/w-book-interact/internal/event"
	"codexie.com/w-book-interact/internal/handler"
	"codexie.com/w-book-interact/internal/logic"
	"codexie.com/w-book-interact/internal/repo"
	"codexie.com/w-book-interact/internal/server"
	"codexie.com/w-book-interact/internal/svc"
	"codexie.com/w-book-interact/internal/worker"
	"github.com/google/wire"
)

// Injectors from wire.go:

func NewInteractApp(config2 config.Config, mysqlConf ioc.MySQLConf, redisConf ioc.RedisConf, kafkaConf ioc.KafkaConf) (*App, error) {
	serviceContext := svc.NewServiceContext(config2)
	client := ioc.InitRedis(redisConf)
	redsync := ioc.InitRedLock(redisConf)
	interactCache := cache.NewInteractRedis(client, redsync)
	gormDB := ioc.InitGormDB(mysqlConf)
	iLikeInfoRepository := repo.NewLikeInfoRepository(interactCache, gormDB)
	interactDao := db.NewInteractDao(gormDB)
	recordDao := db.NewRecordDao(gormDB)
	topLikeCache := cache.NewBigCacheResourceCache()
	iInteractRepo := repo.NewInteractRepository(interactDao, recordDao, interactCache, topLikeCache)
	collectionDao := db.NewCollectionDao(gormDB)
	iCollectRepository := repo.NewCollectRepository(interactCache, collectionDao)
	interactLogic := logic.NewInteractLogic(iLikeInfoRepository, iInteractRepo, iCollectRepository)
	interactHandler := handler.NewInteractHandler(serviceContext, interactLogic)
	saramaClient := ioc.InitKafkaClient(kafkaConf)
	batchConsumer := event.NewBatchReadEventListener(saramaClient, iInteractRepo)
	createEventListener := event.NewCreateEventListener(saramaClient, iInteractRepo)
	app := NewApp(config2, interactHandler, client, batchConsumer, createEventListener)
	return app, nil
}

func NewRpcApp(c config.Config, mysqlConf ioc.MySQLConf, redisConf ioc.RedisConf) (*server.InteractionServer, error) {
	serviceContext := svc.NewServiceContext(c)
	client := ioc.InitRedis(redisConf)
	redsync := ioc.InitRedLock(redisConf)
	interactCache := cache.NewInteractRedis(client, redsync)
	gormDB := ioc.InitGormDB(mysqlConf)
	iLikeInfoRepository := repo.NewLikeInfoRepository(interactCache, gormDB)
	interactDao := db.NewInteractDao(gormDB)
	recordDao := db.NewRecordDao(gormDB)
	topLikeCache := cache.NewBigCacheResourceCache()
	iInteractRepo := repo.NewInteractRepository(interactDao, recordDao, interactCache, topLikeCache)
	collectionDao := db.NewCollectionDao(gormDB)
	iCollectRepository := repo.NewCollectRepository(interactCache, collectionDao)
	interactLogic := logic.NewInteractLogic(iLikeInfoRepository, iInteractRepo, iCollectRepository)
	interactionServer := NewRpcServer(serviceContext, interactLogic)
	return interactionServer, nil
}

// wire.go:

var ServerSet = wire.NewSet(NewApp, NewRpcServer)

var HandlerSet = wire.NewSet(handler.NewInteractHandler)

var LogicSet = wire.NewSet(logic.NewInteractLogic)

var SvcSet = wire.NewSet(svc.NewServiceContext)

var RepoSet = wire.NewSet(repo.NewCollectRepository, repo.NewInteractRepository, repo.NewLikeInfoRepository)

var DaoSet = wire.NewSet(db.NewCollectionDao, db.NewInteractDao, db.NewLikeInfoDao, db.NewRecordDao, cache.NewInteractRedis, cache.NewBigCacheResourceCache)

var DbSet = wire.NewSet(ioc.InitGormDB, ioc.InitRedis, ioc.InitRedLock)

var MessageSet = wire.NewSet(ioc.InitKafkaClient)

var ListenerSet = wire.NewSet(event.NewBatchReadEventListener, event.NewCreateEventListener)

var WokerSet = wire.NewSet(worker.NewTopLikeWorker)
