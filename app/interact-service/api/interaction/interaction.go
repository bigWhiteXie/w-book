// Code generated by goctl. DO NOT EDIT.
// Source: interact.proto

package interaction

import (
	"context"

	"codexie.com/w-book-interact/api/pb/interact"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddReadCntReq        = interact.AddReadCntReq
	CommonResult         = interact.CommonResult
	InteractionResult    = interact.InteractionResult
	InteractionsInfo     = interact.InteractionsInfo
	QueryInteractionReq  = interact.QueryInteractionReq
	QueryInteractionsReq = interact.QueryInteractionsReq
	TopLikeReq           = interact.TopLikeReq
	TopLikeResp          = interact.TopLikeResp

	Interaction interface {
		QueryInteractionInfo(ctx context.Context, in *QueryInteractionReq, opts ...grpc.CallOption) (*InteractionResult, error)
		QueryInteractionsInfo(ctx context.Context, in *QueryInteractionsReq, opts ...grpc.CallOption) (*InteractionsInfo, error)
		IncreReadCnt(ctx context.Context, in *AddReadCntReq, opts ...grpc.CallOption) (*CommonResult, error)
		TopLike(ctx context.Context, in *TopLikeReq, opts ...grpc.CallOption) (*TopLikeResp, error)
	}

	defaultInteraction struct {
		cli zrpc.Client
	}
)

func NewInteraction(cli zrpc.Client) Interaction {
	return &defaultInteraction{
		cli: cli,
	}
}

func (m *defaultInteraction) QueryInteractionInfo(ctx context.Context, in *QueryInteractionReq, opts ...grpc.CallOption) (*InteractionResult, error) {
	client := interact.NewInteractionClient(m.cli.Conn())
	return client.QueryInteractionInfo(ctx, in, opts...)
}

func (m *defaultInteraction) QueryInteractionsInfo(ctx context.Context, in *QueryInteractionsReq, opts ...grpc.CallOption) (*InteractionsInfo, error) {
	client := interact.NewInteractionClient(m.cli.Conn())
	return client.QueryInteractionsInfo(ctx, in, opts...)
}

func (m *defaultInteraction) IncreReadCnt(ctx context.Context, in *AddReadCntReq, opts ...grpc.CallOption) (*CommonResult, error) {
	client := interact.NewInteractionClient(m.cli.Conn())
	return client.IncreReadCnt(ctx, in, opts...)
}

func (m *defaultInteraction) TopLike(ctx context.Context, in *TopLikeReq, opts ...grpc.CallOption) (*TopLikeResp, error) {
	client := interact.NewInteractionClient(m.cli.Conn())
	return client.TopLike(ctx, in, opts...)
}
